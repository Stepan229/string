#ifndef S21_STRING_H
#define S21_STRING_H

#define s21_NULL ((void *)0)
typedef unsigned long int s21_size_t;

#include <ctype.h>
#include <math.h>
#include <stdarg.h>
#include <stdlib.h>
#include <wchar.h>

/**
 * функция возвращает длину строки str
 *
 * @param str строка
 */
s21_size_t s21_strlen(const char *str);

/**
 * функция возвращает разницу между двумя несовпадающими символами
 *
 *
 * @param str1 первая строка для сравнения
 * @param str2 вторая строка для сравнения
 * @param n сколько символов сравнивать
 */
int s21_strncmp(const char *str1, const char *str2, s21_size_t n);

/**
 * функция возвращает первое вхождение всей строки
 * (не включая /0), которая появляется в строке haystack
 *
 * @param haystack строка, в которой весь поиск
 * @param needle строка поиска
 */
char *s21_strstr(const char *haystack, const char *needle);

/**
 * функция возвращает указатель на последнее появление символа c в строке str
 *
 * @param str строка поиска
 * @param c символ поиска
 */
char *s21_strrchr(const char *str, int c);

/**
 * функция возвращает указатель на первое появление символа char в строке str
 *
 * @param str строка поиска
 * @param sym символ поиска
 */
char *s21_strpbrk(const char *str1, const char *str2);

/**
 * функция возвращает указатель на первое появление символа char в строке
 *
 * @param str1 строка поиска
 * @param c символ на замену
 */
char *s21_strchr(const char *str, int c);

/**
 * функция возвращает размер сегмента строки str1, который не содержит
 * любой символ str2
 *
 * @param str1 строка поиска
 * @param str2 набор символов для поиска
 */
s21_size_t s21_strcspn(const char *str1, const char *str2);

/**
 * функция разбивает строку str на ряд токенов, разделенных разделителем
 *
 * @param str строка для разделения
 * @param delim токен
 */
char *s21_strtok(char *str, const char *delim);

/**
 * функция возвращает указатель на первое появление символа без знака в блоке
 * памяти
 *
 * @param str строка поиска
 * @param c набор беззнаковых символов для поиска
 * @param n сколько байтов для поиска
 */
void *s21_memchr(const void *str, int c, s21_size_t n);

/**
 * функция возвращает разницу между двумя байтами, которые не совпадают
 * в блоке памяти
 *
 * @param str1 первый блок памяти
 * @param str2 второй блок памяти
 * @param n сколько байтов сравнивать
 */
int s21_memcmp(const void *str1, const void *str2, s21_size_t n);

/**
 * функция возвращает указатель на dest
 *
 * @param dest строка для копирования
 * @param src копируемая строка
 * @param n сколько байтов копировать
 */
void *s21_memcpy(void *dest, const void *src, s21_size_t n);

/**
 * возвращает указатель на строку
 *
 * @param str1 строка, где изменить байты
 * @param c какой бит (беззнаковый символ) изменить
 * @param n сколько битов менять
 */
void *s21_memset(void *str, int c, s21_size_t n);

/**
 * функция возвращает текст ошибки по номеру ошибки
 *
 * @param errnum номер ошибки
 */
char *s21_strerror(int errnum);

/**
 * Возвращает новую строку, в которой все
 * ведущие и конечные вхождения
 * набор указанных символов (trim_chars)
 * из данной строки (src) удаляются.
 * В случае какой-либо ошибки вернет NULL
 *
 * @param src исходная строка
 * @param trim_chars символы, которые нужно удалить
 */
void *s21_trim(const char *src, const char *trim_chars);

/**
 * Возвращает новую строку, в которой
 * указанная строка (str) вставляется в
 * указана позиция индекса (start_index) в
 * заданная строка (src). В случае любого
 * ошибка, возвращает NULL
 *
 * @param src строка, в которую добавляется
 * @param str строка, что добавить
 * @param start_index индекс для добавления
 */
void *s21_insert(const char *src, const char *str, s21_size_t start_index);

/**
 * Возвращает копию преобразованной строки (str)
 * в нижний регистр. В случае какой-либо ошибки,
 * вернуть NULL
 *
 * @param str строка для нижнего
 */
char *s21_to_lower(const char *str);

/**
 * Возвращает копию преобразованной строки (str)
 * в верхний регистр. В случае какой-либо ошибки,
 * вернуть NULL
 *
 * @param str строка для верхнего
 */
char *s21_to_upper(const char *str);

/**
 * копирует символы из исходной строки в целевую строку
 * до тех пор, пока не будет достигнут конец исходной строки
 *
 * @param dest указатель на целевую строку
 * @param source указатель на исходную строку
 *
 * @return возвращает указатель на начало целевой строки
 */
char *s21_strcpy(char *dest, char *source);

/**
 * считывает форматированный ввод из строки.
 * @param str Это С-строка, которую функция обрабатывает в качестве источника
 * для извлечения данных
 * @param format это С-строка, содержащая один или несколько следующих
 * элементов: пробельный символ, непробельный символ и спецификаторы формата.
 * Спецификатор формата для сканирующих функций следует прототипу:
 * %[*][ширина][длина]спецификатор.
 * @param ... представляет другие параметры, такие как ширина, длина и
 * спецификатор.
 * @return Функция sscanf имеет возвращаемый целочисленный тип. В случае успеха
 * функция возвращает количество успешно присвоенных переменных
 * В случае ошибки функция возвращает отрицательное
 * целочисленное значение
 */
int s21_sscanf(const char *str, const char *format, ...);

/**
 * функция возвращает указатель на дест
 *
 * @param dest строка для объединения
 * @param src строка, которую нужно объединить
 * @param n сколько байт нужно объединить
 */
char *s21_strncat(char *dest, const char *src, s21_size_t n);

/**
 * функция возвращает указатель
 * на несовпадающие символы dest
 *
 * @param dest строка для копирования
 * @param src копируемая строка
 * @param n сколько символов копировать
 */
char *s21_strncpy(char *destination, const char *source, s21_size_t n);

char *s21_strcat(char *destination, const char *source);

/**
 * отправляет форматированный вывод в строку, на которую указывает str.
 * @param str Это С-строка, которую функция обрабатывает в качестве источника
 * для извлечения данных
 * @param format это С-строка, содержащая один или несколько следующих
 * элементов: пробельный символ, непробельный символ и спецификаторы формата.
 * Спецификатор формата для печатающих функций следует прототипу:
 * %[флаги][ширина][.точность][длина]спецификатор
 * @param ... представляет другие параметры, такие как ширина, точность, длина и
 * спецификатор.
 * @return Функция sprintf имеет возвращаемый целочисленный тип. В случае успеха
 * функция возвращает количество символов, записанных в буфер, за исключением
 * завершающего нулевого символа.
 * В случае ошибки функция возвращает отрицательное
 * целочисленное значение
 */
int s21_sprintf(char *buffer, const char *specSymb, ...);

#endif  // SRC_S21_STRING_H
